import io
import json
from datetime import datetime
from django.http import JsonResponse, FileResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt  # ‚Üê This line is missing
from django.shortcuts import render

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import cm

from .models import Asset

from django.shortcuts import render

@csrf_exempt
@login_required
def generate_pies_pdf(request):
    if request.method == 'GET':
        return render(request, 'inventory/pies.html')  # Show the form

    elif request.method == 'POST':
        try:
            data = json.loads(request.body)
            serial_numbers = data.get('serial_numbers', [])
            user = request.user

            updated_assets = []
            for serial in serial_numbers:
                try:
                    asset = Asset.objects.get(serial_number=serial)
                    asset.current_location = user.username
                    asset.current_custodian = user.username
                    asset.save()
                    updated_assets.append(asset)
                except Asset.DoesNotExist:
                    continue

            # Generate PDF
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=2*cm, leftMargin=2*cm, topMargin=1.5*cm, bottomMargin=1.5*cm)
            styles = getSampleStyleSheet()
            elements = []

            elements.append(Paragraph("PERSONAL INSTALLATION REPORT", styles['Title']))
            elements.append(Spacer(1, 12))

            user_info = [
                [f"Generated By: {user.username}", f"Date: {datetime.now().strftime('%d-%m-%Y')}"],
            ]
            user_table = Table(user_info, colWidths=[9*cm, 9*cm])
            user_table.setStyle(TableStyle([
                ('BOX', (0, 0), (-1, -1), 0.6, colors.black),
                ('INNERGRID', (0, 0), (-1, -1), 0.3, colors.grey),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
            ]))
            elements.append(user_table)
            elements.append(Spacer(1, 12))

            elements.append(Paragraph("ITEMS", styles['Heading4']))
            table_data = [["Name and Serial", "Quantity", "Invoice No", "Item", "Location"]]

            for asset in updated_assets:
                table_data.append([
                    f"{asset.model}\nS/N: {asset.serial_number}",
                    asset.quantity,
                    asset.invoice_number,
                    asset.item,
                    asset.current_location
                ])

            table = Table(table_data, colWidths=[5.5*cm, 2*cm, 3.5*cm, 3.5*cm, 3.5*cm])
            table.setStyle(TableStyle([
                ('GRID', (0, 0), (-1, -1), 0.6, colors.black),
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            elements.append(table)
            elements.append(Spacer(1, 12))
            elements.append(Paragraph(f"Total Items: {len(updated_assets)}", styles['Normal']))

            doc.build(elements)
            buffer.seek(0)
            return FileResponse(buffer, as_attachment=True, filename=f'Personal_Installation_Report_{user.username}.pdf')

        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

    return JsonResponse({'error': 'Invalid request method'}, status=405)
